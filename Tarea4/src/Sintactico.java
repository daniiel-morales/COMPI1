
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 14 23:33:58 CST 2016
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 14 23:33:58 CST 2016
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\034" +
    "\005\000\002\034\004\000\002\006\012\000\002\006\014" +
    "\000\002\004\004\000\002\004\003\000\002\005\013\000" +
    "\002\005\007\000\002\010\003\000\002\010\003\000\002" +
    "\032\003\000\002\032\003\000\002\014\003\000\002\014" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\011\000\002\011\011\000" +
    "\002\011\005\000\002\011\003\000\002\007\005\000\002" +
    "\007\003\000\002\003\012\000\002\003\012\000\002\012" +
    "\005\000\002\012\003\000\002\013\011\000\002\013\011" +
    "\000\002\015\005\000\002\015\003\000\002\016\011\000" +
    "\002\016\011\000\002\016\011\000\002\016\011\000\002" +
    "\016\011\000\002\016\015\000\002\016\011\000\002\017" +
    "\006\000\002\017\010\000\002\017\010\000\002\017\010" +
    "\000\002\017\010\000\002\017\010\000\002\020\004\000" +
    "\002\021\005\000\002\021\003\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\004\004\001\002\000\006\005\010\013" +
    "\011\001\002\000\004\002\243\001\002\000\006\002\000" +
    "\004\007\001\002\000\006\005\010\013\011\001\002\000" +
    "\004\004\105\001\002\000\004\014\013\001\002\000\006" +
    "\002\uffff\004\uffff\001\002\000\004\015\014\001\002\000" +
    "\004\016\015\001\002\000\004\004\016\001\002\000\006" +
    "\020\021\035\022\001\002\000\010\004\100\020\021\035" +
    "\022\001\002\000\010\004\ufffa\020\ufffa\035\ufffa\001\002" +
    "\000\004\035\072\001\002\000\004\023\023\001\002\000" +
    "\004\035\024\001\002\000\006\024\uffe8\036\uffe8\001\002" +
    "\000\006\024\026\036\027\001\002\000\004\015\031\001" +
    "\002\000\004\035\030\001\002\000\006\024\uffe9\036\uffe9" +
    "\001\002\000\004\021\032\001\002\000\012\023\034\025" +
    "\036\026\035\035\040\001\002\000\022\006\uffea\022\uffea" +
    "\024\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\001" +
    "\002\000\012\023\034\025\036\026\035\035\040\001\002" +
    "\000\026\006\ufff2\022\ufff2\024\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\036\ufff2\001\002\000\026" +
    "\006\ufff3\022\ufff3\024\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\036\ufff3\001\002\000\020\006\045" +
    "\022\047\030\044\031\043\032\050\033\046\034\042\001" +
    "\002\000\026\006\ufff5\022\ufff5\024\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\001\002\000" +
    "\026\006\ufff4\022\ufff4\024\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\036\ufff4\001\002\000\010\025" +
    "\036\026\035\035\040\001\002\000\010\025\036\026\035" +
    "\035\040\001\002\000\010\025\036\026\035\035\040\001" +
    "\002\000\010\025\036\026\035\035\040\001\002\000\004" +
    "\023\057\001\002\000\004\027\056\001\002\000\004\023" +
    "\051\001\002\000\010\025\036\026\035\035\040\001\002" +
    "\000\004\036\053\001\002\000\010\025\036\026\035\035" +
    "\040\001\002\000\004\024\055\001\002\000\022\006\uffec" +
    "\022\uffec\024\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\001\002\000\010\004\ufff9\020\ufff9\035\ufff9\001\002" +
    "\000\010\025\036\026\035\035\040\001\002\000\004\036" +
    "\061\001\002\000\010\025\036\026\035\035\040\001\002" +
    "\000\004\024\063\001\002\000\022\006\uffed\022\uffed\024" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\001\002" +
    "\000\022\006\ufff0\022\ufff0\024\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\001\002\000\022\006\ufff1\022\ufff1" +
    "\024\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\001" +
    "\002\000\022\006\uffef\022\uffef\024\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\001\002\000\022\006\uffee\022" +
    "\uffee\024\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\001\002\000\020\006\045\024\071\030\044\031\043\032" +
    "\050\033\046\034\042\001\002\000\022\006\uffeb\022\uffeb" +
    "\024\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\001" +
    "\002\000\004\015\073\001\002\000\012\016\075\025\036" +
    "\026\035\035\040\001\002\000\004\027\ufff6\001\002\000" +
    "\004\027\ufff7\001\002\000\004\027\077\001\002\000\010" +
    "\004\ufff8\020\ufff8\035\ufff8\001\002\000\004\013\102\001" +
    "\002\000\010\004\ufffb\020\ufffb\035\ufffb\001\002\000\004" +
    "\006\103\001\002\000\004\004\104\001\002\000\006\002" +
    "\ufffc\004\ufffc\001\002\000\004\004\106\001\002\000\006" +
    "\007\111\010\110\001\002\000\004\004\237\001\002\000" +
    "\004\004\141\001\002\000\004\004\112\001\002\000\004" +
    "\004\113\001\002\000\006\017\117\037\115\001\002\000" +
    "\004\004\uffe4\001\002\000\004\004\133\001\002\000\004" +
    "\004\126\001\002\000\004\004\120\001\002\000\004\025" +
    "\121\001\002\000\004\004\122\001\002\000\004\017\123" +
    "\001\002\000\004\006\124\001\002\000\004\004\125\001" +
    "\002\000\004\004\uffe3\001\002\000\010\007\130\017\117" +
    "\037\115\001\002\000\004\004\uffe5\001\002\000\004\006" +
    "\131\001\002\000\004\004\132\001\002\000\004\004\uffe7" +
    "\001\002\000\004\035\134\001\002\000\004\004\135\001" +
    "\002\000\004\037\136\001\002\000\004\006\137\001\002" +
    "\000\004\004\140\001\002\000\004\004\uffe2\001\002\000" +
    "\004\004\142\001\002\000\020\014\147\017\143\037\153" +
    "\040\151\044\150\045\145\047\152\001\002\000\004\004" +
    "\231\001\002\000\004\004\224\001\002\000\004\004\212" +
    "\001\002\000\004\004\uffe0\001\002\000\004\004\204\001" +
    "\002\000\004\004\176\001\002\000\004\004\170\001\002" +
    "\000\004\004\162\001\002\000\004\004\154\001\002\000" +
    "\004\035\155\001\002\000\004\004\156\001\002\000\004" +
    "\037\157\001\002\000\004\006\160\001\002\000\004\004" +
    "\161\001\002\000\004\004\uffdc\001\002\000\004\016\163" +
    "\001\002\000\004\004\164\001\002\000\004\047\165\001" +
    "\002\000\004\006\166\001\002\000\004\004\167\001\002" +
    "\000\004\004\uffd9\001\002\000\004\016\171\001\002\000" +
    "\004\004\172\001\002\000\004\040\173\001\002\000\004" +
    "\006\174\001\002\000\004\004\175\001\002\000\004\004" +
    "\uffdd\001\002\000\004\025\177\001\002\000\004\004\200" +
    "\001\002\000\004\044\201\001\002\000\004\006\202\001" +
    "\002\000\004\004\203\001\002\000\004\004\uffdb\001\002" +
    "\000\004\016\205\001\002\000\004\004\206\001\002\000" +
    "\004\014\207\001\002\000\004\006\210\001\002\000\004" +
    "\004\211\001\002\000\004\004\uffde\001\002\000\004\035" +
    "\213\001\002\000\004\046\214\001\002\000\004\041\215" +
    "\001\002\000\004\043\216\001\002\000\004\042\217\001" +
    "\002\000\004\004\220\001\002\000\004\045\221\001\002" +
    "\000\004\006\222\001\002\000\004\004\223\001\002\000" +
    "\004\004\uffda\001\002\000\022\010\226\014\147\017\143" +
    "\037\153\040\151\044\150\045\145\047\152\001\002\000" +
    "\004\004\uffe1\001\002\000\004\006\227\001\002\000\004" +
    "\004\230\001\002\000\004\004\uffe6\001\002\000\004\025" +
    "\232\001\002\000\004\004\233\001\002\000\004\017\234" +
    "\001\002\000\004\006\235\001\002\000\004\004\236\001" +
    "\002\000\004\004\uffdf\001\002\000\004\005\240\001\002" +
    "\000\004\006\241\001\002\000\004\004\242\001\002\000" +
    "\006\002\ufffd\004\ufffd\001\002\000\004\002\001\001\002" +
    "\000\006\002\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\006\002\004\034\005\001\001\000\004\006" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\016\005\017\001\001\000\004\005" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\036\014\040\032" +
    "\032\001\001\000\002\001\001\000\010\011\067\014\040" +
    "\032\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\040\032\066\001\001\000\006\014\040\032\065\001" +
    "\001\000\006\014\040\032\064\001\001\000\006\014\040" +
    "\032\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\040\032\051\001\001\000\002" +
    "\001\001\000\006\014\040\032\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\040" +
    "\032\057\001\001\000\002\001\001\000\006\014\040\032" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\075\014\040\032\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\115\013\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\143\016\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
	public Nodo raiz;
    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }

    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TA4 ::= to igual cadena 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TA4",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TA4 ::= cod igual numero 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TA4",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TA4 ::= po igual numero 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TA4",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TA4 ::= ne igual cadena 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TA4",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TA4 ::= dn igual cadena 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TA4",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TA4 ::= tel igual numero 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TA4",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TA2 ::= TA4 
            {
              Nodo RESULT =null;
		int ta4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ta4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ta4 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		RESULT=ta4;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TA2",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TA2 ::= TA2 coma TA4 
            {
              Nodo RESULT =null;
		int ta2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ta2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo ta2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ta4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ta4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ta4 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo tienda = new Nodo("tienda");
		tienda.hijos.add(ta2);
		tienda.hijos.add(ta4);
		RESULT=tienda;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TA2",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TA ::= coma TA2 
            {
              Nodo RESULT =null;
		int ta2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ta2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ta2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		RESULT=ta2;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INITTA ::= tel igual numero TA2 menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int hij1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int hij1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String hij1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int hij2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int hij2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo hij2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITTA",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INITTA ::= dn igual cadena TA2 menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int hij1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int hij1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String hij1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int hij2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int hij2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo hij2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITTA",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INITTA ::= ne igual cadena TA2 menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int hij1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int hij1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String hij1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int hij2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int hij2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo hij2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITTA",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INITTA ::= po igual numero TA2 menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int hij1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int hij1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String hij1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int hij2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int hij2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo hij2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITTA",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INITTA ::= co igual numero TA2 menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int hij1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int hij1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String hij1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int hij2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int hij2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo hij2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITTA",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INITTA ::= to igual cadena TA 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int hij1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int hij1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String hij1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int hij2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hij2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo hij2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITTA",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CO ::= dn doll cadena doll dn menos doll 
            {
              Nodo RESULT =null;
		int dn1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int dn1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String dn1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
            Nodo dir = new Nodo(dn1, dn1right, dn1left);
            Nodo cad = new Nodo(ca, caright, caleft);
            dir.hijos.add(cad);
            RESULT = dir;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CO ::= el doll idd arr c1 pto cm doll el menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(id+a+c+p+m, idleft, mright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CO ::= tel doll numero doll tel menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CO ::= pd doll idd doll pd menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CO ::= ao doll cadena doll ao menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CO ::= ne doll cadena doll ne menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CO ::= id doll numero doll id menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INITCO ::= CO 
            {
              Nodo RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo co = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT=co;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITCO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INITCO ::= INITCO doll CO 
            {
              Nodo RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo init = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo co = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			Nodo crear = new Nodo("crearUsuario");
			crear.hijos.add(init);
			crear.hijos.add(co);
			RESULT=crear;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITCO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IO ::= pd doll idd doll pd menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IO ::= id doll numero doll id menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String hij = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INITIO ::= IO 
            {
              Nodo RESULT =null;
		int ioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo io = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		RESULT=io;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITIO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INITIO ::= INITIO doll IO 
            {
              Nodo RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo init = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo co = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo crear = new Nodo("login");
		crear.hijos.add(init);
		crear.hijos.add(co);
		RESULT=crear;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITIO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RQST ::= co doll doll INITCO doll co menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo hij = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       padre.hijos.add(hij);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RQST",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RQST ::= io doll doll INITIO doll io menos doll 
            {
              Nodo RESULT =null;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int hijleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hijright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo hij = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo padre = new Nodo(pad, padleft, padright);
       padre.hijos.add(hij);
       RESULT = padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RQST",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTID ::= idd 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo identi =new Nodo(id,idleft,idright);
		RESULT=identi;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTID",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTID ::= LISTID coma idd 
            {
              Nodo RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo list = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo lista=new Nodo("ids");
		Nodo identi=new Nodo(id,idleft,idright);
		lista.hijos.add(list);
		lista.hijos.add(identi);
		RESULT=lista;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTID",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EOA ::= VAR 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo var = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		RESULT=var;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EOA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EOA ::= apar EOA cpar 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
		RESULT=e;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EOA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EOA ::= EOA potencia apar VAR coma VAR cpar 
            {
              Nodo RESULT =null;
		
		
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EOA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EOA ::= EOA raiz apar VAR coma VAR cpar 
            {
              Nodo RESULT =null;
		
		
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EOA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EOA ::= EOA por VAR 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo padre = new Nodo (pad,padleft,padright);
		padre.hijos.add(izq);
		padre.hijos.add(der);
		RESULT=padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EOA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EOA ::= EOA dividir VAR 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo padre = new Nodo (pad,padleft,padright);
		padre.hijos.add(izq);
		padre.hijos.add(der);
		RESULT=padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EOA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EOA ::= EOA menos VAR 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo padre = new Nodo (pad,padleft,padright);
		padre.hijos.add(izq);
		padre.hijos.add(der);
		RESULT=padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EOA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EOA ::= EOA mas VAR 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int padleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int padright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String pad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo padre = new Nodo (pad,padleft,padright);
		padre.hijos.add(izq);
		padre.hijos.add(der);
		RESULT=padre;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EOA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INT ::= decimal 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo decimal =new Nodo(dec,decleft,decright);
		RESULT=decimal;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INT ::= numero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo numero =new Nodo(num,numleft,numright);
		RESULT=numero;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VAR ::= INT 
            {
              Nodo RESULT =null;
		int inttleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int inttright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo intt = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		RESULT=intt;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VAR ::= idd 
            {
              Nodo RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo identi =new Nodo(idd,iddleft,iddright);
		RESULT=identi;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DAT ::= VAR 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo var = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		RESULT=var;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DAT",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DAT ::= cadena 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo cadena =new Nodo(ca,caleft,caright);
		RESULT=cadena;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DAT",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MATE ::= cs idd igual DAT pcoma 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
		Nodo cons=new Nodo(c,cleft,cright);
		Nodo identi=new Nodo(ii,iileft,iiright);
		identi.hijos.add(d);
		cons.hijos.add(identi);
		RESULT=cons;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MATE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MATE ::= idd apar LISTID cpar igual allv EOA cllv pcoma 
            {
              Nodo RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo ld = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int eoaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eoaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo eoa = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
		Nodo mate=new Nodo(ii,iileft,iiright);
		Nodo vars=new Nodo("atribs");
		vars.hijos.add(ld);
		Nodo metodo=new Nodo("metodo");
		metodo.hijos.add(eoa);
		mate.hijos.add(vars);
		mate.hijos.add(metodo);
		RESULT=mate;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MATE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INITMATE ::= MATE 
            {
              Nodo RESULT =null;
		int matleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int matright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mat = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			RESULT=mat;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITMATE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INITMATE ::= INITMATE MATE 
            {
              Nodo RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo init = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ma = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			Nodo mat=new Nodo("Constantes");
			mat.hijos.add(init);
			mat.hijos.add(ma);
			RESULT=mat;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INITMATE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLNT ::= me ne igual cadena doll INITMATE doll me menos doll 
            {
              Nodo RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int noleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String no = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo init = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo mat=new Nodo(nom,nomleft,nomright);
		Nodo nombr=new Nodo(no,nomleft,nomright);
		mat.hijos.add(nombr);
		mat.hijos.add(init);
		RESULT=mat;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLNT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLNT ::= rt doll doll RQST doll rt menos doll 
            {
              Nodo RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String rr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int rqsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rqsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo rqs = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
		Nodo rqst=new Nodo(rr,rrleft,rrright);
		rqst.hijos.add(rqs);
		RESULT=rqst;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLNT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // COD ::= doll CLNT 
            {
              Nodo RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cn = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		RESULT=cn;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // COD ::= COD doll CLNT 
            {
              Nodo RESULT =null;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo cod = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int clnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int clnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cln = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		Nodo codigo=new Nodo("codigo");
		codigo.hijos.add(cod);
		codigo.hijos.add(cln);
		RESULT=codigo;				
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= COD 
            {
              Nodo RESULT =null;
		int raizleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int raizright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo raiz = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		parser.raiz=raiz;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

