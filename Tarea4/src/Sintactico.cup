/*----------------------------------------------------------------------------
---------------Gramaticas Practica1_201314810-----------------------
----------------------------------------------------------------------------*/

//-------------------> Importaciones 
//-------------------> Paquetes 
//package Tools;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
//-------------------> Codigo para el parser, variables, metodos
parser code
{:  
	public Nodo raiz;
    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }

    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }
:}

//-------------------> Codigo para las acciones gramaticales
action code
{:
:} 

/*----------------------------------------------------------------------------
----------------------------------------- Area de Declaraciones
----------------------------------------------------------------------------*/

//-------------------> Declaración de Terminales
//-------------------> se les puede indicar x tipo
//-------------------> cadena es string porque me interesa el valor lexico que trae

terminal String doll,rt,menos,io,co,ta,pro,me,ne,igual,cadena,id,cs,allv,cllv,apar,cpar,numero,decimal,pcoma,mas;
terminal String dividir,potencia,raiz,por,idd,coma,pd,ao,c1,cm,pto,tel,el,arr,dn,to,po,cod;
terminal String ig,sl,cd;

//TERMINALES SOLO DEL SERVIDOR
terminal String acor,ccor,nott,andd,igualdad,orr,gt,cr,ma,tmo;

//-------------------> Declaración de No Terminales
//-------------------> se les puede indicar x tipo
non terminal Nodo S,RQST,INITMATE,MATE,CLNT,LISTID,DAT,EOA,INITIO,IO,INT,INITCO,CO,INITTA,TA,TA2,INITTA3,TA3,INITPRO,PRO;
non terminal Nodo INITPRO2,PRO2,INITPRO3,PRO3,VAR,TA4,COD;

//---------------------- Precedencias

//precedence left doll;
//precedence left orr;
precedence left igual;
//precedence left andd;
//precedence left igualdad;
precedence left mas, menos;
precedence left por, dividir;
precedence left potencia;
precedence left raiz;
precedence left apar,cpar;

//-------------------> No Terminal inicial
start with S;

/*----------------------------------------------------------------------------
----------------------------------------- Area de Gramatica
----------------------------------------------------------------------------*/

S::= COD:raiz
	{:
		parser.raiz=raiz;
	:}
	;
COD::= COD:cod doll CLNT:cln
	{:
		Nodo codigo=new Nodo("codigo");
		codigo.hijos.add(cod);
		codigo.hijos.add(cln);
		RESULT=codigo;				
	:}
	| doll CLNT:cn
	{:
		RESULT=cn;
	:}
	;
CLNT::= rt:rr doll doll RQST:rqs doll rt menos doll
	{:
		Nodo rqst=new Nodo(rr,rrleft,rrright);
		rqst.hijos.add(rqs);
		RESULT=rqst;
	:}
	|	me ne:nom igual cadena:no doll INITMATE:init doll me menos doll
	{:
		Nodo mat=new Nodo(nom,nomleft,nomright);
		Nodo nombr=new Nodo(no,nomleft,nomright);
		mat.hijos.add(nombr);
		mat.hijos.add(init);
		RESULT=mat;
	:}
	;
INITMATE::= INITMATE:init MATE:ma
		{:
			Nodo mat=new Nodo("Constantes");
			mat.hijos.add(init);
			mat.hijos.add(ma);
			RESULT=mat;
		:}
		| MATE:mat
		{:
			RESULT=mat;
		:}
		;
MATE::= idd:ii apar LISTID:ld cpar igual allv EOA:eoa cllv pcoma
	{:
		Nodo mate=new Nodo(ii,iileft,iiright);
		Nodo vars=new Nodo("atribs");
		vars.hijos.add(ld);
		Nodo metodo=new Nodo("metodo");
		metodo.hijos.add(eoa);
		mate.hijos.add(vars);
		mate.hijos.add(metodo);
		RESULT=mate;
	:}
	|	cs:c idd:ii igual DAT:d pcoma
	{:
		Nodo cons=new Nodo(c,cleft,cright);
		Nodo identi=new Nodo(ii,iileft,iiright);
		identi.hijos.add(d);
		cons.hijos.add(identi);
		RESULT=cons;
	:}
	;
DAT::= cadena:ca
	{:
		Nodo cadena =new Nodo(ca,caleft,caright);
		RESULT=cadena;
	:}
	| VAR:var
	{:
		RESULT=var;
	:}
	;
VAR::= idd:idd
	{:
		Nodo identi =new Nodo(idd,iddleft,iddright);
		RESULT=identi;
	:}
	| INT:intt
	{:
		RESULT=intt;
	:}
	;
INT::= numero:num
	{:
		Nodo numero =new Nodo(num,numleft,numright);
		RESULT=numero;
	:}
	| decimal:dec
	{:
		Nodo decimal =new Nodo(dec,decleft,decright);
		RESULT=decimal;
	:}
	;
EOA::= EOA:izq mas:pad VAR:der
	{:
		Nodo padre = new Nodo (pad,padleft,padright);
		padre.hijos.add(izq);
		padre.hijos.add(der);
		RESULT=padre;
	:}
	| EOA:izq menos:pad VAR:der
	{:
		Nodo padre = new Nodo (pad,padleft,padright);
		padre.hijos.add(izq);
		padre.hijos.add(der);
		RESULT=padre;
	:}
	| EOA:izq dividir:pad VAR:der
	{:
		Nodo padre = new Nodo (pad,padleft,padright);
		padre.hijos.add(izq);
		padre.hijos.add(der);
		RESULT=padre;
	:}
	| EOA:izq por:pad VAR:der
	{:
		Nodo padre = new Nodo (pad,padleft,padright);
		padre.hijos.add(izq);
		padre.hijos.add(der);
		RESULT=padre;
	:}
	| EOA raiz apar VAR coma VAR cpar
	{:
		
	:}
	| EOA potencia apar VAR coma VAR cpar
	{:
		
	:}
	| apar EOA:e cpar
	{:
		RESULT=e;
	:}
	| VAR:var
	{:
		RESULT=var;
	:}
	;
LISTID::= LISTID:list coma idd:id
	{:
		Nodo lista=new Nodo("ids");
		Nodo identi=new Nodo(id,idleft,idright);
		lista.hijos.add(list);
		lista.hijos.add(identi);
		RESULT=lista;
	:}
	| idd:id
	{:
		Nodo identi =new Nodo(id,idleft,idright);
		RESULT=identi;
	:}
	;
RQST::= io:pad doll doll INITIO:hij doll io menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       padre.hijos.add(hij);
       RESULT = padre;
	:}
	|  co:pad doll doll INITCO:hij doll co menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       padre.hijos.add(hij);
       RESULT = padre;
	:}
//	|  ta INITTA doll ta menos doll
//	|  pro INITPRO doll pro menos doll
	;
INITIO::= INITIO:init doll IO:co
	{:
		Nodo crear = new Nodo("login");
		crear.hijos.add(init);
		crear.hijos.add(co);
		RESULT=crear;
	:}
	| IO:io
	{:
		RESULT=io;
	:}
	;
IO::= id:pad doll numero:hij doll id menos doll 
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| pd:pad doll idd:hij doll pd menos doll 
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	;
INITCO::= INITCO:init doll CO:co
		{:
			Nodo crear = new Nodo("crearUsuario");
			crear.hijos.add(init);
			crear.hijos.add(co);
			RESULT=crear;
		:}
		| CO:co
		{:
			RESULT=co;
		:}
		;
CO::= id:pad doll numero:hij doll id menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| ne:pad doll cadena:hij doll ne menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| ao:pad doll cadena:hij doll ao menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| pd:pad doll idd:hij doll pd menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| tel:pad doll numero:hij doll tel menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| el:pad doll idd:id arr:a c1:c pto:p cm:m doll el menos doll 
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(id+a+c+p+m, idleft, mright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| dn:dn1 doll cadena:ca doll dn menos doll
	{:
            Nodo dir = new Nodo(dn1, dn1right, dn1left);
            Nodo cad = new Nodo(ca, caright, caleft);
            dir.hijos.add(cad);
            RESULT = dir;
    :} 
	;
	
INITTA::= to:pad igual cadena:hij1 TA:hij2
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	:}
	| co:pad igual numero:hij1 TA2:hij2 menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	:}
	| po:pad igual numero:hij1 TA2:hij2 menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	:}
	| ne:pad igual cadena:hij1 TA2:hij2 menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	:}
	| dn:pad igual cadena:hij1 TA2:hij2 menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	:}
	| tel:pad igual numero:hij1 TA2:hij2 menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo1 = new Nodo(hij1, hij1left, hij1right);
       padre.hijos.add(hijo1);
       padre.hijos.add(hij2);
       RESULT = padre;
	:}
	;
TA::= coma TA2:ta2
	{:
		RESULT=ta2;
	:}
// 	| menos doll INITTA3
	;
TA2::= TA2:ta2 coma TA4:ta4
	{:
		Nodo tienda = new Nodo("tienda");
		tienda.hijos.add(ta2);
		tienda.hijos.add(ta4);
		RESULT=tienda;
	:}
	| TA4:ta4
	{:
		RESULT=ta4;
	:}
	;
TA4::=tel:pad igual numero:hij 
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| dn:pad igual cadena:hij
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:} 
	| ne:pad igual cadena:hij 
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| po:pad igual numero:hij
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| cod:pad igual numero:hij
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| to:pad igual cadena:hij
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	;
	
	
	
/*
INITTA3::= INITTA3 doll TA3
	| TA3:ta3
	{:
		RESULT=ta3;
	:}
	;
TA3::= cod:pad doll numero:hij doll cod menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| po:pad doll numero:hij doll po menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| ne:pad doll cadena:hij doll ne menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| dn:pad doll cadena:hij doll dn menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| tel:pad doll numero:hij doll tel menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	| ig:pad doll cadena:hij doll ig menos doll
	{:
		Nodo padre = new Nodo(pad, padleft, padright);
       Nodo hijo = new Nodo(hij, hijleft, hijright);
       padre.hijos.add(hijo);
       RESULT = padre;
	:}
	;
INITPRO::= to igual cadena PRO
		| PRO3 INITPRO3
		;
PRO::= doll doll INITPRO2
		| PRO3 INITPRO3
 		;
INITPRO2::= INITPRO2 doll PRO2
		| PRO2
		;
PRO2::= to doll cadena doll to menos doll
		| cod doll numero doll cod menos doll
		| sl doll numero doll sl menos doll
		| ne doll cadena doll ne menos doll
		| cd doll allv EOA cllv doll cd menos doll
		;
INITPRO3::= INITPRO3 PRO3
		| PRO3
		;
PRO3::= to igual cadena
		| cod igual numero
		| sl igual numero
		| ne igual cadena
		| cd igual allv EOA cllv
		;
*/