/*----------------------------------------------------------------------------
---------------Gramaticas Practica1_201314810-----------------------
----------------------------------------------------------------------------*/

//-------------------> Importaciones 
//-------------------> Paquetes 
package Tools;
import java_cup.runtime.Symbol;
//-------------------> Codigo para el parser, variables, metodos
parser code
{:  
    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }

    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }
:}

//-------------------> Codigo para las acciones gramaticales
action code
{:
:} 

/*----------------------------------------------------------------------------
----------------------------------------- Area de Declaraciones
----------------------------------------------------------------------------*/

//-------------------> Declaración de Terminales
//-------------------> se les puede indicar x tipo
//-------------------> cadena es string porque me interesa el valor lexico que trae
terminal String doll,rt,menos,io,uo,co,ta,pro,me,ne,igual,cadena,id,cs,allv,cllv,apar,cpar,numero,decimal,pcoma,mas;
terminal String dividir,potencia,raiz,por;

//-------------------> Declaración de No Terminales
//-------------------> se les puede indicar x tipo
non terminal S,RQST,MATE,CLNT,OP,LISTID,DAT,EOA,IO,IO2,IO3,INT,EPSILO,CO,CO2,CO3,TA;

//---------------------- Precedencias

precedence left orr;
precedence left igual;
precedence left andd;
precedence left igualdad;
precedence left mas, menos;
precedence left por, dividir;
precedence left potencia;
precedence left raiz;
precedence left apar,cpar;

//-------------------> No Terminal inicial
start with S;

/*----------------------------------------------------------------------------
----------------------------------------- Area de Gramatica
----------------------------------------------------------------------------*/

S::= doll CLNT
	| S
	;
CLNT::= rt doll doll RQST doll rt menos doll
	|	me ne igual cadena doll MATE doll me menos doll
	;
MATE::= idd apar LISTID cpar igual allv EOA cllv pcoma
	|	cs idd igual DAT pcoma
	;
DAT::= cadena
	| INT
	;
INT::= numero
	| decimal
	;
EOA::= EOA mas INT
	| EOA menos INT
	| EOA dividir INT
	| EOA por INT
	| EOA raiz apar INT coma INT cpar
	| EOA potencia apar INT coma INT cpar
	| apar EOA cpar
	| INT
	;
LISTID::== LISTID coma idd
	| idd
	;
RQST::= io doll IO doll io menos doll
	|  co doll CO doll co menos doll
	|  ta TA doll ta menos doll
	|  pro 
	;
IO::= doll id doll numero doll id menos doll IO2
	| doll pd doll idd doll pd menos doll IO3 
	;
IO2::=	doll pd doll idd doll pd menos doll
	;
IO3::=doll id doll numero doll id menos doll
	;
CO::=doll id doll numero doll id menos doll doll ne doll cadena doll ne menos doll doll ao doll cadena doll ao menos doll doll pd doll contra doll pd menos doll doll CO2
	;
CO2::=tel doll numero doll tel menos doll doll el doll idd arr c1 pto cm doll el menos doll doll dn doll cadena doll dn menos doll
	| el doll idd arr c1 pto cm doll el menos doll CO3
	;
CO3::=doll dn doll cadena doll dn menos doll
	| EPSILO {: RESULT=null; :}
	;
TA::= to igual cadena doll TA doll cod doll numero doll cod menos doll doll po doll numero doll po menos doll doll ne doll cadena doll ne menos doll doll dn doll cadena doll dn menos doll doll tel doll numero doll tel menos doll doll ig doll cadena doll ig menos doll 
	| TA2
	;
TA2::=
	;


 